package org.ual.cnsa.jgc450;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import java.util.*;
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class SailsappTest {
  private WebDriver driver;
  private static Map<String, Object> vars = new HashMap<String, Object>();;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    int browser= Integer.parseInt(System.getProperty("browser", "0"));; 
    Boolean headless = true;

    switch (browser) {
    case 0:
      System.getProperty("webdriver.gecko.driver");
    	//System.setProperty("webdriver.gecko.driver",  "drivers/geckodriver.exe");
    	FirefoxOptions firefoxOptions = new FirefoxOptions();
    	if (headless) firefoxOptions.setHeadless(headless);
    	driver = new FirefoxDriver(firefoxOptions);

    	break;
    case 1: 
      System.getProperty("webdriver.chrome.driver");
    	//System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
    	ChromeOptions chromeOptions = new ChromeOptions();
    	if (headless) chromeOptions.setHeadless(headless);
    	chromeOptions.addArguments("window-size=1920,1080");
    	driver = new ChromeDriver(chromeOptions);
    	break;
    default:
    	fail("Please select a browser");
    	break;
    }
    js = (JavascriptExecutor) driver;
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void test1_registeremail() {
    // Test name: register-email
    // Step # | name | target | value
    // 1 | open | http://localhost:1337/ | 
    driver.get("http://localhost:1337/");
    // 2 | setWindowSize | 1038x742 | 
    driver.manage().window().setSize(new Dimension(1038, 742));
    // 3 | click | linkText=Sign up | 
    driver.findElement(By.linkText("Sign up")).click();
    // 4 | executeScript | return "ual-" + Math.floor(Math.random()*1500000)+"@ual.es" | emailrandom
    vars.put("emailrandom", js.executeScript("return \"ual-\" + Math.floor(Math.random()*1500000)+\"@ual.es\""));
    // 5 | type | id=full-name | User-random
    driver.findElement(By.id("full-name")).sendKeys("User-random");
    // 6 | type | id=email-address | ${emailrandom}
    driver.findElement(By.id("email-address")).sendKeys(vars.get("emailrandom").toString());
    // 7 | type | id=password | joaquin
    driver.findElement(By.id("password")).sendKeys("joaquin");
    // 8 | type | id=confirm-password | joaquin
    driver.findElement(By.id("confirm-password")).sendKeys("joaquin");
    // 9 | click | id=terms-agreement | 
    driver.findElement(By.id("terms-agreement")).click();
    // 10 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    try {
        Thread.sleep(500);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    // 11 | click | id=header-account-menu-link | 
    driver.findElement(By.id("header-account-menu-link")).click();
    // 12 | click | linkText=Sign out | 
    driver.findElement(By.linkText("Sign out")).click();
    // 13 | click | linkText=Sign up | 
    driver.findElement(By.linkText("Sign up")).click();
    // 14 | click | css=.ajax-button | 
    driver.findElement(By.cssSelector(".ajax-button")).click();
    // 15 | storeText | css=.form-group:nth-child(2) > .invalid-feedback | message
    vars.put("message", driver.findElement(By.cssSelector(".form-group:nth-child(2) > .invalid-feedback")).getText());
    // 16 | assert | message | Please enter a valid email address.
    assertEquals(vars.get("message").toString(), "Please enter a valid email address.");
  }
  @Test
  public void test2_login() {
    // Test name: login
    // Step # | name | target | value
    // 1 | open | http://localhost:1337/ | 
    driver.get("http://localhost:1337/");
    // 2 | setWindowSize | 1038x742 | 
    driver.manage().window().setSize(new Dimension(1038, 742));
    // 3 | click | linkText=Log in | 
    driver.findElement(By.linkText("Log in")).click();
    // 4 | type | css=.form-group:nth-child(1) > .form-control | ${emailrandom}
    driver.findElement(By.cssSelector(".form-group:nth-child(1) > .form-control")).sendKeys(vars.get("emailrandom").toString());
    // 5 | type | css=.form-group:nth-child(2) > .form-control | joaquin
    driver.findElement(By.cssSelector(".form-group:nth-child(2) > .form-control")).sendKeys("joaquin");
    // 6 | click | css=.ajax-button | 
    driver.findElement(By.cssSelector(".ajax-button")).click();
    // 7 | click | id=header-account-menu-link | 
    try {
        Thread.sleep(500);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    driver.findElement(By.id("header-account-menu-link")).click();
    // 8 | click | linkText=Sign out | 
    driver.findElement(By.linkText("Sign out")).click();
    // 9 | type | css=.form-group:nth-child(1) > .form-control | jgc450@asd
    driver.findElement(By.cssSelector(".form-group:nth-child(1) > .form-control")).sendKeys("jgc450@asd");
    // 10 | type | css=.form-group:nth-child(2) > .form-control | joaquin
    driver.findElement(By.cssSelector(".form-group:nth-child(2) > .form-control")).sendKeys("joaquin");
    // 11 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    // 12 | assertText | css=.invalid-feedback | Please provide a valid email address.
    assertThat(driver.findElement(By.cssSelector(".invalid-feedback")).getText(), is("Please provide a valid email address."));
  }
  @Test
  public void test3_edituserloged() {
    // Test name: edit-user-loged
    // Step # | name | target | value
    // 1 | open | http://localhost:1337/login | 
    driver.get("http://localhost:1337/login");
    // 2 | setWindowSize | 1038x742 | 
    driver.manage().window().setSize(new Dimension(1038, 742));
    // 3 | type | css=.form-group:nth-child(1) > .form-control | ${emailrandom}
    driver.findElement(By.cssSelector(".form-group:nth-child(1) > .form-control")).sendKeys(vars.get("emailrandom").toString());
    // 4 | type | css=.form-group:nth-child(2) > .form-control | joaquin
    driver.findElement(By.cssSelector(".form-group:nth-child(2) > .form-control")).sendKeys("joaquin");
    // 5 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    // 6 | click | id=header-account-menu-link | 
    try {
        Thread.sleep(500);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    driver.findElement(By.id("header-account-menu-link")).click();
    // 7 | click | linkText=Settings | 
    driver.findElement(By.linkText("Settings")).click();
    // 8 | click | linkText=Edit profile | 
    driver.findElement(By.linkText("Edit profile")).click();
    // 9 | click | id=email-address |
    driver.findElement(By.id("email-address")).click();
    // 10 | type | id=email-address | jgc450
    WebElement emailInput = driver.findElement(By.id("email-address"));
    emailInput.sendKeys(Keys.CONTROL + "a");
    emailInput.sendKeys(Keys.DELETE);
    emailInput.sendKeys("jgc450");
    // 11 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    // 12 | executeScript | return document.getElementById("email-address").validationMessage | message
    vars.put("message", js.executeScript("return document.getElementById(\"email-address\").validationMessage"));
    // 13 | executeScript | return navigator.userAgent | navigatoruserAgent
    vars.put("navigatoruserAgent", js.executeScript("return navigator.userAgent"));
    // 14 | if | ${navigatoruserAgent}.includes("Chrome") | 
    if ((Boolean) js.executeScript("return (arguments[0].includes(\'Chrome\'))", vars.get("navigatoruserAgent"))) {
      // 15 | assert | message | Incluye un signo "@" en la dirección de correo electrónico. La dirección "jgc450" no incluye el signo "@".
      assertEquals(vars.get("message").toString(), "Incluye un signo \"@\" en la dirección de correo electrónico. La dirección \"jgc450\" no incluye el signo \"@\".");
      // 16 | end |  | 
    }
    // 17 | if | ${navigatoruserAgent}.includes("Firefox") | 
    if ((Boolean) js.executeScript("return (arguments[0].includes(\'Firefox\'))", vars.get("navigatoruserAgent"))) {
      // 18 | assert | message | Introduzca una dirección de correo.
      assertEquals(vars.get("message").toString(), "Please enter an email address.");
      // 19 | end |  | 
    }
    // 20 | type | id=email-address | ${emailrandom}.com
    emailInput.sendKeys(Keys.CONTROL + "a");
    emailInput.sendKeys(Keys.DELETE);
    emailInput.sendKeys(vars.get("emailrandom").toString()+".com");
    // 21 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    // 22 | assertText | css=.row:nth-child(5) strong | ${emailrandom}.com
    assertThat(driver.findElement(By.cssSelector(".row:nth-child(5) strong")).getText(), is(vars.get("emailrandom").toString()+".com"));
    // 23 | click | id=header-account-menu-link | 
    driver.findElement(By.id("header-account-menu-link")).click();
    // 24 | click | linkText=Sign out | 
    driver.findElement(By.linkText("Sign out")).click();
  }
  @Test
  public void test4_passwordchange() {
    // Test name: password-change
    // Step # | name | target | value
    // 1 | open | http://localhost:1337/ | 
    driver.get("http://localhost:1337/");
    // 2 | setWindowSize | 1038x742 | 
    driver.manage().window().setSize(new Dimension(1038, 742));
    // 3 | click | linkText=Log in | 
    driver.findElement(By.linkText("Log in")).click();
    // 4 | type | css=.form-group:nth-child(1) > .form-control | ${emailrandom}.com
    driver.findElement(By.cssSelector(".form-group:nth-child(1) > .form-control")).sendKeys(vars.get("emailrandom").toString()+".com");
    // 5 | type | css=.form-group:nth-child(2) > .form-control | joaquin
    driver.findElement(By.cssSelector(".form-group:nth-child(2) > .form-control")).sendKeys("joaquin");
    // 6 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    try {
        Thread.sleep(500);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    // 7 | click | id=header-account-menu-link | 
    driver.findElement(By.id("header-account-menu-link")).click();
    // 8 | click | linkText=Settings | 
    driver.findElement(By.linkText("Settings")).click();
    // 9 | click | linkText=Change password | 
    driver.findElement(By.linkText("Change password")).click();
    // 10 | type | id=password | joaqui
    WebElement passwordInput = driver.findElement(By.id("password"));
    passwordInput.sendKeys(Keys.CONTROL + "a");
    passwordInput.sendKeys(Keys.DELETE);
    passwordInput.sendKeys("joaqui");
    // 11 | type | id=confirm-password | joaqu
    WebElement confirmPasswordInput = driver.findElement(By.id("confirm-password"));
    confirmPasswordInput.sendKeys(Keys.CONTROL + "a");
    confirmPasswordInput.sendKeys(Keys.DELETE);
    confirmPasswordInput.sendKeys("joaqu");
    // 12 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    // 13 | assertText | css=.invalid-feedback | Your new password and confirmation do not match.
    assertThat(driver.findElement(By.cssSelector(".invalid-feedback")).getText(), is("Your new password and confirmation do not match."));
    // 14 | click | id=confirm-password | 
    driver.findElement(By.id("confirm-password")).click();
    // 15 | type | id=confirm-password | joaqui
    confirmPasswordInput.sendKeys(Keys.CONTROL + "a");
    confirmPasswordInput.sendKeys(Keys.DELETE);
    confirmPasswordInput.sendKeys("joaqui");
    // 16 | click | css=.button-text | 
    driver.findElement(By.cssSelector(".button-text")).click();
    try {
        Thread.sleep(500);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    // 18 | assertText | css=h1 | My account
    assertThat(driver.findElement(By.cssSelector("h1")).getText(), is("My account"));
    // 19 | click | id=header-account-menu-link | 
    driver.findElement(By.id("header-account-menu-link")).click();
    // 20 | click | linkText=Sign out | 
    driver.findElement(By.linkText("Sign out")).click();
  }
}
